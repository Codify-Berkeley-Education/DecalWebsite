"use strict";(self.webpackChunkde_cal_website=self.webpackChunkde_cal_website||[]).push([[731],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,p=u["".concat(l,".").concat(m)]||u[m]||h[m]||i;return n?a.createElement(p,r(r({ref:t},d),{},{components:n})):a.createElement(p,r({ref:t},d))}));function p(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:o,r[1]=s;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4777:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:1},r="Assignment 1: Git and Command Line Basics",s={unversionedId:"Assignments/Assignment-1-Git",id:"Assignments/Assignment-1-Git",title:"Assignment 1: Git and Command Line Basics",description:"Assignment Purpose and Goals",source:"@site/docs/Assignments/Assignment-1-Git.md",sourceDirName:"Assignments",slug:"/Assignments/Assignment-1-Git",permalink:"/DecalWebsite/docs/Assignments/Assignment-1-Git",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Assignments/Assignment-1-Git.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Assignment 0: Setup for The Course",permalink:"/DecalWebsite/docs/Assignments/Assignment-0-Setup"},next:{title:"Assignment 2 JavaScript",permalink:"/DecalWebsite/docs/Assignments/Assignment-2-JavaScript"}},l={},c=[{value:"Assignment Purpose and Goals",id:"assignment-purpose-and-goals",level:2},{value:"Assignment Overview",id:"assignment-overview",level:2},{value:"Part 1: Configure Git and GitHub",id:"part-1-configure-git-and-github",level:2},{value:"Part 2: Create a git repository and upload it to github",id:"part-2-create-a-git-repository-and-upload-it-to-github",level:2},{value:"Part 3: Clone and work with an existing git repository",id:"part-3-clone-and-work-with-an-existing-git-repository",level:2},{value:"Part 4: Submission and grading",id:"part-4-submission-and-grading",level:2},{value:"Assignment 1.1",id:"assignment-11",level:3},{value:"Assignment 1.2",id:"assignment-12",level:3}],d={toc:c},u="wrapper";function h(e){let{components:t,...i}=e;return(0,o.kt)(u,(0,a.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"assignment-1-git-and-command-line-basics"},"Assignment 1: Git and Command Line Basics"),(0,o.kt)("h2",{id:"assignment-purpose-and-goals"},"Assignment Purpose and Goals"),(0,o.kt)("h2",{id:"assignment-overview"},"Assignment Overview"),(0,o.kt)("p",null,"This assignment has two parts. In Assignment-1.1, you will create your own repository from scratch and add a file to it. It will cover the basics of git and GitHub. In Assignment-1.2, you will clone a starter repository, and learn about creating and merging branches. Both repositories will be turned in to GitHub classroom for auto grading."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"This assignment gives very detailed instructions and walkthrough of how to complete it because a good understanding of Git and GitHub is essential to success as a developer and in this course. Future assignments will give far less detailed instructions.")),(0,o.kt)("h2",{id:"part-1-configure-git-and-github"},"Part 1: Configure Git and GitHub"),(0,o.kt)("p",null,"If you do not already have a personal ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/"},"GitHub")," account, go ahead and make one. Be sure to use a personal email, as all the work you complete on your GitHub account can be used to form a personal portfolio. You will also have to ",(0,o.kt)("a",{parentName:"p",href:"https://git-scm.com/downloads"},"install git"),". Hopefully you have already completed these steps in the setup assignment!"),(0,o.kt)("p",null,"Once you have created a github account, you need to sign in on your local machine so that you can issue commands from your local terminal. There are ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/about-authentication-to-github"},"several ways to do this"),", but we recommend and will demonstrate how to do so through the ",(0,o.kt)("a",{parentName:"p",href:"https://cli.github.com/"},"github cli")," (command line interface)."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Follow the instructions to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/cli/cli#installation"},"download the cli")," for your operating system. I'd recommend downloading and using a package manager, ",(0,o.kt)("a",{parentName:"p",href:"https://brew.sh/"},"homebrew")," for mac and ",(0,o.kt)("a",{parentName:"p",href:"https://chocolatey.org/install"},"chocolatey")," for windows. After, verify your installation by running the command >gh --version"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % gh --version\ngh version 2.24.3 (2023-03-09)\nhttps://github.com/cli/cli/releases/tag/v2.24.3\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the command >gh auth login and select Github.com, HTTPS, Yes, Login with a web browser, and copy the one-time code"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % gh auth login\n ? What account do you want to log into? GitHub.com\n ? What is your preferred protocol for Git operations? HTTPS\n ? Authenticate Git with your GitHub credentials? Yes\n ? How would you like to authenticate GitHub CLI? Login with a web browser\n ! First copy your one-time code: F485-11B8\n Press Enter to open github.com in your browser...\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Enter the one time code into the browser, and then press authorize on the next page")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In your terminal, you should see that you are now logged in. You can double check by running the command >gh auth status"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % gh auth status\ngithub.com\n    \u2713 Logged in to github.com as aidansunbury (/Users/aidan/.config/gh/hosts.yml)\n    \u2713 Git operations for github.com configured to use https protocol.\n    \u2713 Token: gho\\_****************\\*\\*\\*\\*****************\n    \u2713 Token scopes: gist, read:org, repo, workflow\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Finally, you will want to configure git to add the correct name and email address to all of your commits. To do this run"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-console"},'aidan@Aidans-MBP-4 ~ % git config --global user.name "Your Name"\naidan@Aidans-MBP-4 ~ % git config --global user.email email@gmail.com\n')))),(0,o.kt)("h2",{id:"part-2-create-a-git-repository-and-upload-it-to-github"},"Part 2: Create a git repository and upload it to github"),(0,o.kt)("p",null,"The rest of this assignment, except for the steps that tell you otherwise, can and should be completed entirely through the command line. While it may be confusing and slow at first, learning to use the command line will vastly increase your productivity as a developer."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Open the command line (powershell on windows or terminal on mac) and navigate to a directory (folder) where you want to create a git repository.")),(0,o.kt)("p",null,"When you first open your terminal, it is likely to open to your root directory. You can view your current directory (print working directory) with the command ",(0,o.kt)("strong",{parentName:"p"},">pwd")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % pwd\n/Users/aidan\n")),(0,o.kt)("p",null,"You can view all of your current directory's subdirectories with the command ",(0,o.kt)("strong",{parentName:"p"},">ls")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % ls\nApplications\nDesktop\nDocuments\nDownloads\n")),(0,o.kt)("p",null,"And you can navigate to one of these subdirectories with the command ",(0,o.kt)("strong",{parentName:"p"},">cd ","[subdirectory]")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % cd Documents\naidan@Aidans-MBP-4 Documents % pwd\n/Users/aidan/Documents\n")),(0,o.kt)("p",null,"To navigate to a parent directory, use ",(0,o.kt)("strong",{parentName:"p"},">cd ../")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 ~ % cd ../\naidan@Aidans-MBP-4 Documents % pwd\n/Users/aidan\n")),(0,o.kt)("p",null,"These commands can also be chained to navigate multiple directories at once."),(0,o.kt)("p",null,"Once in your desired directory, create a new directory to house our git repository with ",(0,o.kt)("strong",{parentName:"p"},">mkdir ","[directory-name]")," and cd into it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 Documents % mkdir MyRepo\naidan@Aidans-MBP-4 Documents % cd MyRepo\naidan@Aidans-MBP-4 MyRepo %\n")),(0,o.kt)("p",null,"Initialize a git repo with ",(0,o.kt)("strong",{parentName:"p"},">git init")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 MyRepo % git init\nInitialized empty Git repository in /Users/aidan/Documents/Codify Projects/Decal/MyRepo/.git/\n")),(0,o.kt)("p",null,"Create a README.md file from the terminal using the touch command ",(0,o.kt)("strong",{parentName:"p"},">touch README.MD")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 MyRepo % touch README.MD\n")),(0,o.kt)("p",null,'Write "Hello world from the terminal" to the README.md file. Executing ',(0,o.kt)("strong",{parentName:"p"},">echo")," returns the output of the command or value it is passed (in this case just a string) and >> writes to the end of a file. We can verify we were successful by running ",(0,o.kt)("strong",{parentName:"p"},">cat ","[filename]")," to display the contents of a file."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'aidan@Aidans-MBP-4 MyRepo % echo "Hello world from the terminal" >> README.MD\naidan@Aidans-MBP-4 MyRepo % cat README.MD\nHello world from the terminal\n')),(0,o.kt)("p",null,"Now we have added and modified files within our git repository. However, these files are not being tracked yet. We can view our current status with ",(0,o.kt)("strong",{parentName:"p"},">git status")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'aidan@Aidans-MBP-4 MyRepo % git status\nOn branch main\n\nNo commits yet\n\nUntracked files:\n  (use "git add <file>..." to include in what will be committed)\n    README.MD\n\nnothing added to commit but untracked files present (use "git add" to track)\n')),(0,o.kt)("p",null,"Now add all untracked files with ",(0,o.kt)("strong",{parentName:"p"},">git add .")," also run ",(0,o.kt)("strong",{parentName:"p"},">git status")," again to see that our file has been staged for a commit."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 MyRepo % git add .\n")),(0,o.kt)("p",null,'In order to "save" our work, we now need to commit out changes with ',(0,o.kt)("strong",{parentName:"p"},">git commit"),", and supply a message describing our commit with the ",(0,o.kt)("strong",{parentName:"p"},"-m")," tag."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'aidan@Aidans-MBP-4 MyRepo % git commit -m "Initial Commit"\n[main (root-commit) 3f1372c] Initial Commit\n 1 file changed, 1 insertion(+)\n create mode 100644 README.MD\n')),(0,o.kt)("p",null,"At any point, you can view your commit history with the command ",(0,o.kt)("strong",{parentName:"p"},">git log")),(0,o.kt)("p",null,"In order for other people to collaborate on your repository and for git to actually be useful, we need to be able to upload it to github. We will show you first how to do this through the github cli, but if you prefer, you may follow the directions for uploading a local repo using the ",(0,o.kt)("a",{parentName:"p",href:"https://docs.github.com/en/migrations/importing-source-code/using-the-command-line-to-import-source-code/adding-locally-hosted-code-to-github#adding-a-local-repository-to-github-using-git"},"github site"),"."),(0,o.kt)("p",null,"Run the command ",(0,o.kt)("strong",{parentName:"p"},">gh repo create")," and follow the prompts. Be sure to select Push an existing repository to GitHub, the current directory as the path (just select the default), and set the visibility to public."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},'aidan@Aidans-MBP-4 MyRepo % gh repo create\n? What would you like to do? Push an existing local repository to GitHub\n? Path to local repository .\n? Repository name Decal-Assignment1-MyRepo\n? Repository owner Codify-Club-Berkeley\n? Description Student Created Repo for Decal Assigment 1\n? Visibility Public\n\u2713 Created repository Codify-Club-Berkeley/Decal-Assignment1-MyRepo on GitHub\n? Add a remote? Yes\n? What should the new remote be called? origin\n\u2713 Added remote https://github.com/Codify-Club-Berkeley/Decal-Assignment1-MyRepo.git\n? Would you like to push commits from the current branch to "origin"? Yes\n')),(0,o.kt)("p",null,"Now navigate to the remote url output by the terminal, and you should see your README.MD file in a GitHub repository."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"MyRepo",src:n(961).Z,width:"1846",height:"776"})),(0,o.kt)("p",null,"Currently, there is only contributor in this repository, but in a large team, many people will be pushing code to the remote repository, and you will have to pull that code back down into your local repository to view and build on those changes. We will simulate this by editing the file right from GitHub (don't complete this part of the assignment in the terminal).\nClick the pencil icon to edit README.MD, and in the interactive editor, add a ",(0,o.kt)("strong",{parentName:"p"},"\\"),' at the end of "Hello world from the terminal" to make a new line, and then add the text "Hello world from GitHub". Press commit changes and commit the changes directly to main with the default commit message. Your repo should now look like this.'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"MyRepo2",src:n(9002).Z,width:"1842",height:"804"})),(0,o.kt)("p",null,"If you reopen README.MD on your local machine, these changes will not be reflected. To fix this, run the command ",(0,o.kt)("strong",{parentName:"p"},">git pull origin main")," and the changes will be added to your local repository."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 MyRepo % cat README.MD\nHello world from the terminal \\\nHello world from GitHub\n")),(0,o.kt)("p",null,"You are now finished with the first part of the assignment. You will get full credit if your README.MD file contains the two lines we added and your repo has at least two commits."),(0,o.kt)("h2",{id:"part-3-clone-and-work-with-an-existing-git-repository"},"Part 3: Clone and work with an existing git repository"),(0,o.kt)("p",null,'To you want to make a copy of a remote repository on your local device, you need to "clone" the repository using a url. In this case, you will need to clone the starter repository.'),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Most starter repositories in this course will be assigned through GitHub Classroom. We are not doing this for this assignment because we want to show you the normal way you would work clone a remote repository.")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Navigate to the ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/Codify-Berkeley-Education/Assignment-1.2-Starter"},"starter repo"),' and click the "code" dropdown. Copy the clone HTTPS url.'),(0,o.kt)("li",{parentName:"ol"},"Run ",(0,o.kt)("strong",{parentName:"li"},">git clone ","[repo-url]")," in your command line in the folder you want the repository you want to clone into."),(0,o.kt)("li",{parentName:"ol"},"Open the newly created folder in VS Code")),(0,o.kt)("p",null,"Now that we have the new repository, we want to start making changes to it. Start by making two new branches named branch1 and branch2. Make sure to verify that the branches exist."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Console"},"aidan@Aidans-MBP-4 Assignment-1.2-Starter % git branch branch1 # Create a branch named branch1\naidan@Aidans-MBP-4 Assignment-1.2-Starter % git branch branch2 # Create a branch named branch2\naidan@Aidans-MBP-4 Assignment-1.2-Starter % git branch # prints all available branches\nbranch1\nbranch2\n* main # The current branch will have an * in front\n")),(0,o.kt)("p",null,"Now we can switch between each of these branches with ",(0,o.kt)("strong",{parentName:"p"},">git checkout ","[branch-name]"),". In this case, pretend we are working on two different features on a project, and so we want to keep our work histories on each of these separated."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-Console"},"aidan@Aidans-MBP-4 Assignment-1.2-Starter % git checkout branch1 # Switch to branch1\naidan@Aidans-MBP-4 Assignment-1.2-Starter % git branch\n* branch1 # Now we are on branch1\nbranch2\nmain\n")),(0,o.kt)("admonition",{type:"danger"},(0,o.kt)("p",{parentName:"admonition"},"Now that you know how to create branches within Git repositories, ",(0,o.kt)("strong",{parentName:"p"},"NEVER")," ever make changes directly to the main branch. Always use a new branch for whatever changes you are working on, then merge it into the main branch when you are finished. This process will be outlined in the rest of this assignment.")),(0,o.kt)("p",null,"Open up ",(0,o.kt)("strong",{parentName:"p"},"file1.txt"),' and change line 3 to say "You are student number 2". Add and commit (with a useful commit message!) the changes to branch1. Now toggle back and forth between the main branch and branch1. You should see file1.txt update to reflect your changes each time you change your branch.'),(0,o.kt)("p",null,"But how do we merge these changes into our master branch? The standard practice is to first push the changes to GitHub, and then make a pull request. Start by pushing your changes from branch1, and then navigate to the repository on GitHub."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 Assignment-1.2-Starter % git push origin branch1\nTotal 0 (delta 0), reused 0 (delta 0), pack-reused 0\nremote:\nremote: Create a pull request for 'branch1' on GitHub by visiting:\nremote:      https://github.com/aidansunbury/Assignment-1.2-Starter/pull/new/branch1\nremote:\nTo https://github.com/aidansunbury/Assignment-1.2-Starter.git\n * [new branch]      branch1 -> branch1\n")),(0,o.kt)("p",null,"Click the branch dropdown to navigate to branch1. Click on the ",(0,o.kt)("strong",{parentName:"p"},"1 commit ahead")," link text to generate a new pull request for this branch."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"PR",src:n(1459).Z,width:"913",height:"333"})),(0,o.kt)("p",null,'From here, you can name your pull request, write a description of all changes, and add reviewers to the pull request. For this assignment, name the pull request "Updated Student Number" and add a description. Then press create pull request.'),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Change-PR",src:n(5040).Z,width:"1258",height:"751"})),(0,o.kt)("p",null,"The next screen will show you the details of the pull request. Other collaborators on the repository can leave comments of the pull request, or conduct a formal review. In this case, there is nothing we need to review, so go ahead and merge the pull request. And delete the branch."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},'It is best practice to select the option to "squash and merge" instead of just merging the pull request. This will squash all of the commits made on the feature branch into a single commit once it is merged onto the main branch. As feature branches can easily have 20+ commits each, it is cumbersome to view all of these commits on the main branch. Squashing allows each change to the main branch to be viewed as a single easy to understand commit.')),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Merge-PR",src:n(7285).Z,width:"1292",height:"630"})),(0,o.kt)("p",null,"Now go back to your local repository and ",(0,o.kt)("strong",{parentName:"p"},">git pull")," from the main branch. You should see your changes reflected in file1.txt. You may also notice that if you run ",(0,o.kt)("strong",{parentName:"p"},">git branch"),", branch1 still appears despite the fact that we deleted it. This is normal and reflects an important feature of Git's distributed nature. Deleting the branch on the remote repository does not delete the branch locally. This is the same reason we had to pull the changes from the remote repository before we saw the updates reflected in our local main branch."),(0,o.kt)("p",null,"Normally after a branch is already merged into main on the remote repository, we no longer need it locally. Run ",(0,o.kt)("strong",{parentName:"p"},">git branch -D branch1")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-console"},"aidan@Aidans-MBP-4 Assignment-1.2-Starter % git branch -D branch1\nDeleted branch branch1 (was c0d3e5b).\n")),(0,o.kt)("p",null,"Now switch over to branch2 so that we can make some more changes. Open up ",(0,o.kt)("strong",{parentName:"p"},"file1.txt"),' again and this time change line 3 to say "You are student number 3". Add, commit, and push the changes to GitHub. Create a new pull request, still making sure to give it an informative title and description of the changes.'),(0,o.kt)("p",null,"On this new PR, there are conflicts with the main branch which must be resolved. We edited the student number on multiple different branches, and as a result GitHub does not know which change we want to keep and which change we want to override."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Conflict-1",src:n(8384).Z,width:"934",height:"257"})),(0,o.kt)("p",null,"Click resolve conflicts see what lines are conflicting. Here you see that since we edited the same line on two different branches, and GitHub wants us to choose which branches' changes to keep. In this case, let's keep the changes we made on branch2, deleting the equals signs, >>> signs and <<< signs, and all of the content from the main branch."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Conflict-2",src:n(9959).Z,width:"1199",height:"273"})),(0,o.kt)("p",null,"When you are all done, your file1.txt should look something like this. When it does, go ahead and click ",(0,o.kt)("strong",{parentName:"p"},"mark as resolved")," and ",(0,o.kt)("strong",{parentName:"p"},"Commit merge"),"."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Conflict-3",src:n(8385).Z,width:"405",height:"185"})),(0,o.kt)("p",null,"Now merge and delete branch2. Congratulations! You have now finished your first assignment."),(0,o.kt)("h2",{id:"part-4-submission-and-grading"},"Part 4: Submission and grading"),(0,o.kt)("p",null,"The auto grader will run the following checks on your assignments. Each check is worth the same number of points."),(0,o.kt)("h3",{id:"assignment-11"},"Assignment 1.1"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"The README.MD file contains the exact text of described in the assignment"),(0,o.kt)("li",{parentName:"ol"},"There are at least two commits in the repository to the main branch")),(0,o.kt)("h3",{id:"assignment-12"},"Assignment 1.2"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},'file1.txt must contain the line "You are student number 3"'),(0,o.kt)("li",{parentName:"ol"},"There must be two closed pull requests"),(0,o.kt)("li",{parentName:"ol"},"There are at least two commits on the main branch, one for each branch we merged into main. These commits must be auto generated commits from merging pull request numbers 1 and 2."),(0,o.kt)("li",{parentName:"ol"},"There must only be one active branch (the main branch)")),(0,o.kt)("p",null,"Unfortunately, due to the nature of the auto grader for this specific assignment, if you are not passing the auto grader checks you may need to start over and redo one either part 1.1 or 1.2 entirely. This is because the auto grader is checking for specific branch names and pull request numbers. On all future assignments in this course, this will not be the case, and you will only be graded on the final state of your submission."))}h.isMDXComponent=!0},5040:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Edit-PR-3f68fa1bd3eb8c48cef8a7ada3e6f418.png"},8384:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Merge-Conflict1-5166df19bda7edf0e4fb21830b5a8f0e.png"},9959:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Merge-Conflict2-a173bd0a09634d691404419a3ac794c9.png"},8385:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Merge-Conflict3-900fc5dcea1043767246ab0792865fe1.png"},9002:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/MyRepo-Screenshot-2-4d43a6445d5b97cb6a55ffb12984093a.png"},961:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/MyRepo-Screenshot-b09c4fb300254739d13c5e8ec9dcdee2.png"},1459:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/Starter-PR-c7f8202eb5525d46fa56c6d821939ae6.png"},7285:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/View-PR-65763f87d2fde25da3e26e337ceae870.png"}}]);